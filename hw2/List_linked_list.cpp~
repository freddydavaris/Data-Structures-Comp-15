#include "List_linked_list.h"

#include <iostream>
#include <cassert>

using namespace std;

// hint: in your constructor, you might want to set the head to NULL
List_linked_list::List_linked_list()
{
	head = NULL;
}
List_linked_list::~List_linked_list()
{
	// delete list by looping through and deleting each node
}

// copy constructor
List_linked_list::List_linked_list(const List_linked_list& source) {
	// explicit copy constructor necessary because of cards array
	if (source.head == NULL) return; // nothing to do

	head = new Card_Node;
	Card_Node *this_current = head;
	Card_Node *source_current = source.head;

	while (source_current != NULL) {
		// deep copy each Card_Node
		if (source_current->next != NULL) {
			Card_Node *new_node = new Card_Node();
			this_current->next = new_node;
			new_node->card = source_current->next->card;
		}
		else {
			this_current->next = NULL; // at tail
		}
		source_current = source_current->next;
		this_current = this_current->next;
	}
}

// operator= overload
List_linked_list List_linked_list::operator =(const List_linked_list&
		source) {
	// explicit operator= overload necessary because of cards array

	// check for self-assignment -- return without doing anything
	if (this == &source) {
		return *this;
	}
	// delete all current cards
	while (head != NULL) {
		Card_Node *next = head->next;
		delete head;
		head = next;
	}
	// copy over all cards from source list
	if (source.head == NULL) return *this; // nothing to do

	head = new Card_Node;
	Card_Node *this_current = head;
	Card_Node *source_current = source.head;

	while (source_current != NULL) {
		// deep copy each Card_Node
		this_current->card = source_current->card;
		if (source_current->next != NULL) {
			Card_Node *new_node = new Card_Node();
			this_current->next = new_node;
		}
		else {
			this_current->next = NULL; // at tail
		}
		source_current = source_current->next;
		this_current = this_current->next;
	}
	return *this;
}

void List_linked_list::print_list()
{
	Card_Node *current = head;
	while (current != NULL) {
		current->card.print_card();
		if (current->next != NULL) {
			cout << ",";
		}
		else {
			cout << "\n";
		}
		current = current->next;
	}
}

void List_linked_list::print_list_int()
{
	Card_Node *current = head;
	while (current != NULL) {
		current->card.print_card_int();
		if (current->next != NULL) {
			cout << ",";
		}
		else {
			cout << "\n";
		}
		current = current->next;
	}
}
// returns the number of cards in the hand
int List_linked_list::cards_in_hand(){
	
	int x=0;
	Card_Node *temp = head;

	if (temp == NULL) {
		return x;
	}
	else {
		while(temp != NULL) {
			x++; 
			temp = temp->next;	
			
		} 
	}
	return x; 
} 
	
	// empties the list; head should equal NULL QUESTION: Check if correct
void List_linked_list::make_empty() { 
	  
	Card_Node *current = head; 
	Card_Node *follower; 
	if (head != NULL) {

	    while (current->next != NULL) {
		follower = current; 
		current = current->next;
		delete follower;
	}
	
	delete current; 
	
	} 
	head = NULL; 
}
	
	// inserts a card at the head
	// Should allow insert into an empty list
void List_linked_list::insert_at_head(Card c) {
	//make new node 
	Card newCard = c; 
	Card_Node *newNode = new Card_Node;
	newNode->card = newCard; 

	if (head == NULL) { 
	   head = newNode;
	   head->next = NULL;
	}
	else {
	
	newNode->next = head;
	head = newNode;
	}
}

	// inserts a card at the tail (final node)
	// should allow insert into an empty list
void List_linked_list::insert_at_tail(Card c){

	Card newCard = c;
	Card_Node *temp = head;
	Card_Node *newNode = new Card_Node;
	int x = cards_in_hand();
	newNode->card = newCard; 

	if (x == 0) {
		head = newNode; 
		newNode->next = NULL;
	}
	
	else {
	for (int i = 0; i < x - 1; i++) {
		temp = temp->next;
	}
	temp->next = newNode;
	newNode->next = NULL;
	newNode->card = newCard;
	}
}
	// inserts a card at an index such that
	// all cards following the index will be moved farther
	// down the list by one.
	// The index can be one after the tail of the list
	// I.e., you can insert at index 0 into an empty list,
	// and you can insert at index 4 in a list with 4 nodes.
	// In the first case, the node inserted would become the head
	// In the second case, the node inserted would be inserted
	// after the current tail.
void List_linked_list::insert_at_index(Card c, int index){
	
	Card newCard = c; 
	Card_Node *temp = head;
	Card_Node *newNode = new Card_Node;
	newNode->card = newCard;
	
	if(index == 0){
		insert_at_head(c);
	
	}
	else {
	for (int i = 0; i < index - 1; i++) {
		
	    temp = temp->next;
	}
	newNode->next = temp->next; 
	temp->next = newNode;
	}
}
	
	// replaces the card at index
	// A card at index must already exist
void List_linked_list::replace_at_index(Card c, int index){
	

	Card newCard = c;
	Card_Node *temp = head;
	int x = index;
	
	for (int i = 0; i < x; i++) {
		temp = temp->next;
	}

	temp->card = newCard;
}

	// returns the card at index.
	// allowed to crash if index is not in the list
Card List_linked_list::card_at(int index){
	
	Card theCard;
	Card_Node *temp = head;
	int x = index;
	
	for (int i = 0; i < x; i++) {
		temp = temp->next;
	}
	theCard = temp->card; 
	return theCard;
}
	
	// returns true if the card is in the list
	// returns false if the card is not in the list
bool List_linked_list::has_card(Card c){
	
	Card theCard = c;
	Card_Node *temp = head;

	if (head == NULL) {
		return false;
	}

	while (temp->next != NULL) {
		if (temp->card.same_card(theCard) == true){
			return true;
		}
		temp = temp->next;
	}
	return false;
}

	// removes the card from the list
	// Returns true if the card was removed
	// Returns false if the card was not in the list
bool List_linked_list::remove(Card c){
      
	Card_Node *follower = head; 
	Card_Node *temp = head; 
	Card theCard = c; 
	
	if (head != NULL && head->card.same_card(theCard) == true) {
		head = head->next;
		delete temp;
		return true;
	}
	
	while (temp != NULL) {
	   
	 if (temp->card.same_card(theCard) == false) {
		    follower = temp; 
		    temp = temp->next;
	}
	else {
	follower->next = temp->next;
	delete temp;
	return true;
	}
	}
	return false; 

}

	// Removes the card from the head, and assigns the head
	// to head->next
	// Returns the card that was removed
	// Allowed to fail if list is empty
Card List_linked_list::remove_from_head() 
{
	
	Card theCard = head->card; 
	//Card_Node *newNode = head; 
	Card_Node *temp = head; 

	
	  //newNode->next = newNode;
	  head = head->next; 
	 delete temp; 
	
	 return theCard;
	
}

	// Removes the card from the tail
	// Returns the card that was removed
	// Allowed to fail if the list is empty
Card List_linked_list::remove_from_tail(){
		  
	
	if(cards_in_hand() == 1 ){
		return remove_from_head();
	}
	
	
	
	else {
	
	Card_Node *current = head; 
	Card_Node *follower = head; 
	Card theCard; 
	
	while (current->next != NULL) {
	    follower = current;
	    current = current->next;
	}
	theCard = current->card;
	follower->next = NULL;
	delete current;
	return theCard;	
	}
}

	// Removes the card from index
	// Returns the card that was removed
	// Allowed to fail if index is beyond the end of the list
Card List_linked_list::remove_from_index(int index){
 
	 Card theCard;
	 
	if (index == 0) {
	return remove_from_head();
  }
 
  else {
        //cout << "\nindex is " << index << endl;
	Card_Node *follower = head; 
	Card_Node *temp = head; 
	
	
	for (int i = 0; i < index; i++) {
		follower = temp;
		
			temp = temp->next;
		
	} 
	
	follower->next = temp->next; 
	theCard = temp->card ;
	delete temp; 
	
  }
  	return theCard; 

}

